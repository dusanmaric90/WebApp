package controller.search;
		
import javax.ejb.EJB;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Collection;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import model.*;
	
import org.hibernate.criterion.Conjunction;
import org.hibernate.criterion.Restrictions;
		

import dao.*;

public class {{name}}SearchController extends HttpServlet {
			
			
@EJB 
I{{name}}Dao {{name}}Dao;
			
			
@Override
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
	doPost(req,resp);
}
			
			@Override
			protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
				Conjunction conjuction = Restrictions.conjunction();
				
{% for attribute in attributes %}	
{% if attribute.type is defined and attribute.type == "Date" %}
String {{attribute.name}}String = req.getParameter("{{attribute.name}}");
Date {{attribute.name}} = null;
SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");					
try {
	if(!{{attribute.name}}String.equals("")){
		{{attribute.name}} = dateFormat.parse({{attribute.name}}String);
		conjuction.add(Restrictions.like("{{attribute.name.lower()}}", {{attribute.name}}));
	}
} catch (ParseException e) {
	req.setAttribute("badFormat", true);
	RequestDispatcher dispatcher = req.getRequestDispatcher("./Search{{name}}.jsp");
	dispatcher.forward(req, resp);
	return;
}
{% elif attribute.type is defined and attribute.type == "Integer" %}
Integer {{attribute.name}} = null;
if (req.getParameter("{{attribute.name}}") != null && !"".equals(req.getParameter("{{attribute.name}}")) ) {
	String {{attribute.name}}String = req.getParameter("{{attribute.name}}");
	boolean {{attribute.name}}Boolean = false;
	if ({{attribute.name}}String.endsWith("*")){
		{{attribute.name}}Boolean = true;
		{{attribute.name}}String.replace("*", "");
	}
	try{
		{{attribute.name}} = Integer.parseInt({{attribute.name}}String);
		if ({{attribute.name}}Boolean)
			conjuction.add(Restrictions.like("{{attribute.name.lower()}}", {{attribute.name}}));
		else
			conjuction.add(Restrictions.eq("{{attribute.name.lower()}}",{{attribute.name}}));
	} catch (NumberFormatException e) {
		String error = "Field must be integer!";
		req.setAttribute("error", error);
		RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareSearch");
		dispatcher.forward(req, resp);
		return;	
	}	
}
{% elif attribute.enum is defined and attribute.enum == "true" %}
String {{attribute.name}}Value =    req.getParameter("{{attribute.name}}");
if(!{{attribute.name}}Value.equals("null")){
	{{attribute.type}} {{attribute.name}} = {{attribute.type}}.valueOf(req.getParameter("{{attribute.name}}"));
	conjuction.add(Restrictions.like("{{attribute.name.lower()}}", {{attribute.name}}));
}
{% elif attribute.many_to_one is defined and attribute.many_to_one == "true"%}
String {{attribute.name}}Value = req.getParameter("{{attribute.name}}");
if(!{{attribute.name}}Value.equals("null")){	
Integer {{attribute.name}} =  	Integer.parseInt({{attribute.name}}Value);
conjuction.add(Restrictions.like("{{attribute.name}}.id", {{attribute.name}}));
}
{% elif attribute.one_to_many is not defined %}
String {{attribute.name}} = req.getParameter("{{attribute.name}}");
	if ({{attribute.name}} != null && !{{attribute.name}}.equals("")){
		if({{attribute.name}}.endsWith("*")){
			{{attribute.name}} = {{attribute.name}}.replace("*", "%");
			conjuction.add(Restrictions.like("{{attribute.name.lower()}}", {{attribute.name}}));
		}else{
			conjuction.add(Restrictions.eq("{{attribute.name.lower()}}", {{attribute.name}}));
		}
	}
{%- endif %}	
{% endfor %}

				
{% for attribute in attributes_parent %}	
{% if attribute.type is defined and attribute.type == "Date" %}
String {{attribute.name}}String = req.getParameter("{{attribute.name}}");
Date {{attribute.name}} = null;
SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");					
try {
	if(!{{attribute.name}}String.equals("")){
		{{attribute.name}} = dateFormat.parse({{attribute.name}}String);
		conjuction.add(Restrictions.like("{{attribute.name.lower()}}", {{attribute.name}}));
	}
} catch (ParseException e) {
	req.setAttribute("badFormat", true);
	RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareSearch");
	dispatcher.forward(req, resp);
	return;
}
{% elif attribute.type is defined and attribute.type == "Integer" %}
Integer {{attribute.name}} = null;
if (req.getParameter("{{attribute.name}}") != null && !"".equals(req.getParameter("{{attribute.name}}")) ) {
	String {{attribute.name}}String = req.getParameter("{{attribute.name}}");
	boolean {{attribute.name}}Boolean = false;
	if ({{attribute.name}}String.endsWith("*")){
		{{attribute.name}}Boolean = true;
		{{attribute.name}}String.replace("*", "");
	}
	try{
		{{attribute.name}} = Integer.parseInt({{attribute.name}}String);
		if ({{attribute.name}}Boolean)
			conjuction.add(Restrictions.like("{{attribute.name.lower()}}", {{attribute.name}}));
		else
			conjuction.add(Restrictions.eq("{{attribute.name.lower()}}",{{attribute.name}}));
	} catch (NumberFormatException e) {
		String error = "Polje treba da bude broj!";
		req.setAttribute("error", error);
		RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareSearch");
		dispatcher.forward(req, resp);
		return;	
	}	
}
{% elif attribute.enum is defined and attribute.enum == "true" %}
String {{attribute.name}}Value =    req.getParameter("{{attribute.name}}");
if(!{{attribute.name}}Value.equals("null")){
	{{attribute.type}} {{attribute.name}} = {{attribute.type}}.valueOf(req.getParameter("{{attribute.name}}"));
	conjuction.add(Restrictions.like("{{attribute.name.lower()}}", {{attribute.name}}));
}
{% elif attribute.many_to_one is defined and attribute.many_to_one == "true"%}
String {{attribute.name}}Value = req.getParameter("{{attribute.name}}");
if(!{{attribute.name}}Value.equals("null")){	
Integer {{attribute.name}} =  	Integer.parseInt({{attribute.name}}Value);
conjuction.add(Restrictions.like("{{attribute.name}}.id", {{attribute.name}}));
}
{% elif attribute.one_to_many is not defined %}
String {{attribute.name}} = req.getParameter("{{attribute.name}}");
	if ({{attribute.name}} != null && !{{attribute.name}}.equals("")){
		if({{attribute.name}}.endsWith("*")){
			{{attribute.name}} = {{attribute.name}}.replace("*", "%");
			conjuction.add(Restrictions.like("{{attribute.name.lower()}}", {{attribute.name}}));
		}else{
			conjuction.add(Restrictions.eq("{{attribute.name.lower()}}", {{attribute.name}}));
		}
	}
{%- endif %}	
{% endfor %}
						
	List<{{name}}> {{name.lower()}}s;			
	if(size(conjuction.conditions())!=0){
		 {{name.lower()}}s = {{name}}Dao.findBySearchCriteria(conjuction);
	}else{
		 {{name.lower()}}s = {{name}}Dao.findAll();
	}				
	req.setAttribute("{{name.lower()}}s", {{name.lower()}}s);
	RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareSearch");
	dispatcher.forward(req, resp);
	return;

}
public int size(Iterable<?> it) {
	  if (it instanceof Collection)
	    return ((Collection<?>)it).size();

	  // else iterate

	  int i = 0;
	  for (Object obj : it) i++;
	  return i;
	}
}	