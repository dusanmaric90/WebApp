package controller.add;
		
import java.text.SimpleDateFormat;
import java.io.IOException;
import java.util.*;
import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import model.*;
import javax.servlet.RequestDispatcher;
import java.lang.NumberFormatException;
import java.text.ParseException;
import java.lang.IllegalArgumentException;

import dao.*;

 
    

    
public class {{name}}ControllerAdd extends HttpServlet {
	
@EJB
private I{{name}}Dao {{name}}Dao;
	
{% for attribute in attributes %}
{% if attribute.many_to_one is defined and attribute.many_to_one == "true" %}
@EJB
private I{{attribute.type}}Dao {{attribute.type}}Dao;	
{%- endif %}	
{% endfor %}

{% for item in foreignKeysParent %}
@EJB
private I{{item}}Dao {{item}}Dao;			
{% endfor %}	
	
	
@Override
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
	doPost(req,resp);
	}
@Override
protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

{% for attribute in attributes %}
{% if attribute.many_to_one is defined and attribute.many_to_one == "true" %}
Integer  {{attribute.name}} = null;	
{% elif attribute.type is defined and attribute.type == "Date" %}
String  {{attribute.name}} = null;
{% elif attribute.enum is defined and attribute.enum == "true" %}
String  {{attribute.name}} = null;
{% elif attribute.one_to_many is not defined %}
{{attribute.type}} {{attribute.name}} = null;
{%- endif %}	
{% endfor %}

{% for attribute in attributes_parent %}
{% if attribute.many_to_one is defined and attribute.many_to_one == "true" %}
Integer  {{attribute.name}} = null;	
{% elif attribute.type is defined and attribute.type == "Date" %}
String  {{attribute.name}} = null;
{% elif attribute.enum is defined and attribute.enum == "true" %}
String  {{attribute.name}} = null;
{% elif attribute.one_to_many is not defined %}
{{attribute.type}} {{attribute.name}} = null;
{%- endif %}	
{% endfor %}

{% for attribute in attributes %}
{% if attribute.many_to_one is defined and attribute.many_to_one == "true" %}
if (req.getParameter("{{attribute.name}}") != null && !"".equals(req.getParameter("{{attribute.name}}"))) {
	try{
		{{attribute.name}} = Integer.parseInt(req.getParameter("{{attribute.name}}"));
	} catch (NumberFormatException e) {
		String error = "Field must be integer!";
		req.setAttribute("error", error);
		RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareAdd");
		dispatcher.forward(req, resp);
		return;	
	}

}
{% elif attribute.type is defined and attribute.type == "Integer" %}
if (req.getParameter("{{attribute.name}}") != null && !"".equals(req.getParameter("{{attribute.name}}"))) {
	try{
		{{attribute.name}} = Integer.parseInt(req.getParameter("{{attribute.name}}"));
	} catch (NumberFormatException e) {
		String error = "Field must be integer!";
		req.setAttribute("error", error);
		RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareAdd");
		dispatcher.forward(req, resp);
		return;	
	}

}
{% elif attribute.one_to_many is not defined %}
if (req.getParameter("{{attribute.name}}") != null && !"".equals(req.getParameter("{{attribute.name}}")) ) {
	{{attribute.name}} = req.getParameter("{{attribute.name}}");
}
{%- endif %}	
{% endfor %}

{% for attribute in attributes_parent %}
{% if attribute.many_to_one is defined and attribute.many_to_one == "true" %}
if (req.getParameter("{{attribute.name}}") != null && !"".equals(req.getParameter("{{attribute.name}}"))) {
	try{
		{{attribute.name}} = Integer.parseInt(req.getParameter("{{attribute.name}}"));
	} catch (NumberFormatException e) {
		String error = "Field must be integer!";
		req.setAttribute("error", error);
		RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareAdd");
		dispatcher.forward(req, resp);
		return;	
	}

}
{% elif attribute.type is defined and attribute.type == "Integer" %}
if (req.getParameter("{{attribute.name}}") != null && !"".equals(req.getParameter("{{attribute.name}}"))) {
	try{
		{{attribute.name}} = Integer.parseInt(req.getParameter("{{attribute.name}}"));
	} catch (NumberFormatException e) {
		String error = "Field must be integer!";
		req.setAttribute("error", error);
		RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareAdd");
		dispatcher.forward(req, resp);
		return;	
	}

}
{% elif attribute.one_to_many is not defined %}
if (req.getParameter("{{attribute.name}}") != null && !"".equals(req.getParameter("{{attribute.name}}")) ) {
	{{attribute.name}} = req.getParameter("{{attribute.name}}");
}
{%- endif %}	
{% endfor %}
				
{{name}} temp{{name}} = new {{name}}();

{% for attribute in attributes %}
{% if attribute.many_to_one is defined and attribute.many_to_one == "true" %}
if({{attribute.name}} !=null){
	temp{{name}}.set{{attribute.name.capitalize()}}({{attribute.type}}Dao.findById({{attribute.name}}));
}
{% elif attribute.type is defined and attribute.type == "Date" %}
if({{attribute.name}} !=null){
	SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
	try{
		Date date = format.parse({{attribute.name}});
		temp{{name}}.set{{attribute.name.capitalize()}}(date);
	} catch (ParseException e) {
		String error = "Error in pattern of date filed!";
		req.setAttribute("error", error);
		RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareAdd");
		dispatcher.forward(req, resp);
		return;	
	}
}
{% elif attribute.enum is defined and attribute.enum == "true" %}
if({{attribute.name}} !=null){
	{{attribute.type}} enum{{attribute.name.capitalize()}} = {{attribute.type}}.valueOf({{attribute.name}});
	temp{{name}}.set{{attribute.name.capitalize()}}(enum{{attribute.name.capitalize()}});
}
{% elif attribute.one_to_many is not defined %}
if({{attribute.name}} !=null){
	temp{{name}}.set{{attribute.name.capitalize()}}({{attribute.name}});
}
{%- endif %}	
{% endfor %}

{% for attribute in attributes_parent %}
{% if attribute.many_to_one is defined and attribute.many_to_one == "true" %}
if({{attribute.name}} !=null){
	temp{{name}}.set{{attribute.name.capitalize()}}({{attribute.type}}Dao.findById({{attribute.name}}));
}
{% elif attribute.type is defined and attribute.type == "Date" %}
if({{attribute.name}} !=null){
	SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
	try{
		Date date = format.parse({{attribute.name}});
		temp{{name}}.set{{attribute.name.capitalize()}}(date);
	} catch (ParseException e) {
		String error = "Error in pattern of date filed!!";
		req.setAttribute("error", error);
		RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareAdd");
		dispatcher.forward(req, resp);
		return;	
	}
}
{% elif attribute.enum is defined and attribute.enum == "true" %}
if({{attribute.name}} !=null){
	{{attribute.type}} enum{{attribute.name.capitalize()}} = {{attribute.type}}.valueOf({{attribute.name}});
	temp{{name}}.set{{attribute.name.capitalize()}}(enum{{attribute.name.capitalize()}});
}
{% elif attribute.one_to_many is not defined %}
if({{attribute.name}} !=null){
	temp{{name}}.set{{attribute.name.capitalize()}}({{attribute.name}});
}
{%- endif %}	
{% endfor %}
		
try{
	{{name}}Dao.save(temp{{name}});
} catch (Exception e){
	String error = "Pogresni podaci!";
	req.setAttribute("error", error);
	RequestDispatcher dispatcher = req.getRequestDispatcher("./{{name}}ControllerPrepareAdd");
	dispatcher.forward(req, resp);
	return;
}
	getServletContext().getRequestDispatcher("/{{name}}ControllerShow").forward(req, resp);
	return;

}
}
	
	